@model MVCTask.Models.User

@{
    ViewBag.Title = "Edit";
    
}




@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
      
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        <br />
        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.RadioButtonFor(m => m.Gender, "Male")Male
                @Html.RadioButtonFor(m => m.Gender, "Female")Female

            </div>
        </div>
        <br />
        <div class="form-group">
            @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CountryId, "Country", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CountryId", (IEnumerable<SelectListItem>)ViewBag.CountryList, "Select Country", new { @class = "form-control", id = "CountryId" })
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StateId, "State", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("StateId", new List<SelectListItem>(), "Select State", new { @class = "form-control", id = "StateId" })
                @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CityId, "City", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CityId", new List<SelectListItem>(), "Select City", new { @class = "form-control", id = "CityId" })
                @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Edit" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script type="text/javascript">


    @*$(document).ready(function ()
 {
         $('#CountryId').change(function () {
             debugger;
             var CountryId = $(this).val();
             if (CountryId) {
                 $.getJSON('@Url.Action("FecthState", "Registration")', { CountryId: CountryId }, function (states) {
                     var stateSelect = $('#StateId');
                     stateSelect.empty();
                     stateSelect.append('<option>Select State</option>');
                     $.each(states, function (index, state) {
                         $('#StateId').append($('<option>',
                             {
                             value: state.Value,
                             text: state.Text
                         }));
                     });
                 });
             }
         });



    $('#StateId').change(function ()
{
    debugger;
    var StateId = $(this).val();
    console.log("State selected: " + StateId);
    if (StateId)
    {
        $.getJSON('@Url.Action("FecthCity", "Registration")', { StateId: StateId })
            .done(function (cities)
        {
            var citySelect = $('#CityId');
            citySelect.empty();
            citySelect.append('<option>Select City</option>');
            $.each(cities, function (index, city)
            {
                $('#CityId').append($('<option>',{
                    value: city.Value,
                    text: city.Text
                }));
            });
        }).fail(function(jqXHR, textStatus, errorThrown) {
            console.error("Error fetching cities: " + textStatus);
        });
    } else {
        $('#CityId').empty().append('<option>Select City</option>');
    }
});



    var selectedCountry = $('#CountryId').val();
 if (selectedCountry) {
     debugger;
     $.getJSON('@Url.Action("FecthState", "Registration")', { countryId: selectedCountry }, function (states)
     {
         $.each(states, function (index, state)
         {
             $('#StateId').append($('<option/>',
             {
                 value: state.Value,
                 text: state.Text
             }));
         });
         $('#StateId').val('@Model.StateId');
     });
 }

     var selectedState = $('#StateId').val();
     if (selectedState)
     {
         debugger;
         $.getJSON('@Url.Action("FecthCity", "Registration")', { stateId: selectedState }, function (cities)
         {
             $.each(cities, function (index, city)
            {
                $('#CityId').append($('<option/>',
                {
                    value: city.Value,
                    text: city.Text
                }));
            });

            $('#CityId').val('@Model.CityId');
        });
    }
});*@
    $(document).ready(function() {
    var selectedCountry = $('#CountryId').val();
    if (selectedCountry) {
        $.getJSON('@Url.Action("FecthState", "Registration")', { CountryId: selectedCountry }, function(states) {
            var stateSelect = $('#StateId');
            stateSelect.empty();
            stateSelect.append('<option>Select State</option>');
            $.each(states, function(index, state) {
                stateSelect.append($('<option>', {
                    value: state.Value,
                    text: state.Text
                }));
            });
            stateSelect.val('@Model.StateId'); // Set the selected state
            stateSelect.trigger('change'); // Trigger change to load cities
        });
    }

    $('#CountryId').change(function() {
        var CountryId = $(this).val();
        if (CountryId) {
            $.getJSON('@Url.Action("FecthState", "Registration")', { CountryId: CountryId }, function(states) {
                var stateSelect = $('#StateId');
                stateSelect.empty();
                stateSelect.append('<option>Select State</option>');
                $.each(states, function(index, state) {
                    stateSelect.append($('<option>', {
                        value: state.Value,
                        text: state.Text
                    }));
                });
                stateSelect.trigger('change'); // Trigger change to load cities
            });
        }
    });

    $('#StateId').change(function() {
        var StateId = $(this).val();
        if (StateId) {
            $.getJSON('@Url.Action("FecthCity", "Registration")', { StateId: StateId })
                .done(function(cities) {
                    var citySelect = $('#CityId');
                    citySelect.empty();
                    citySelect.append('<option>Select City</option>');
                    $.each(cities, function(index, city) {
                        citySelect.append($('<option>', {
                            value: city.Value,
                            text: city.Text
                        }));
                    });
                    citySelect.val('@Model.CityId'); // Set the selected city
                })
                .fail(function(jqXHR, textStatus, errorThrown) {
                    console.error("Error fetching cities: " + textStatus);
                });
        } else {
            $('#CityId').empty().append('<option>Select City</option>');
        }
    });

    // Set up initial city based on selected state
    var selectedState = $('#StateId').val();
    if (selectedState) {
        $.getJSON('@Url.Action("FecthCity", "Registration")', { StateId: selectedState })
            .done(function(cities) {
                var citySelect = $('#CityId');
                citySelect.empty();
                citySelect.append('<option>Select City</option>');
                $.each(cities, function(index, city) {
                    citySelect.append($('<option>', {
                        value: city.Value,
                        text: city.Text
                    }));
                });
                citySelect.val('@Model.CityId'); // Set the selected city
            })
            .fail(function(jqXHR, textStatus, errorThrown) {
                console.error("Error fetching cities: " + textStatus);
            });
    }
});

</script>
}